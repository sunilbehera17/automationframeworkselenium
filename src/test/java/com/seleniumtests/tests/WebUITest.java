package com.seleniumtests.tests;

import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.LinkedHashMap;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.seleniumtests.core.Filter;
import com.seleniumtests.core.SeleniumTestPlan;

import com.seleniumtests.dataobject.WebUIData;
import com.seleniumtests.util.SpreadSheetHelper;
import com.seleniumtests.util.internal.entity.TestEntity;

import com.seleniumtests.webpage.WebUIPage;
import com.seleniumtests.webpage.WebUIRelatedContent;

public class WebUITest extends SeleniumTestPlan{
	
	@DataProvider(
	        name = "WebUIData",
	        parallel = false
	    )
	    public static Iterator<Object[]> getUserInfo(final Method m)
	        throws Exception {
	        Filter filter = Filter.equalsIgnoreCase(TestEntity.TEST_METHOD,
	                m.getName());

	        LinkedHashMap<String, Class<?>> classMap =
	            new LinkedHashMap<String, Class<?>>();
	        classMap.put("TestEntity", TestEntity.class);
	        classMap.put("WebUIData", WebUIData.class);

	        return SpreadSheetHelper.getEntitiesFromSpreadsheet(
	                WebUITest.class, classMap, "Webui.csv", filter);
	    }
	    
	    
	  /*  @Test(
	    		priority=1,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "Sign up site"
	            
	        )
	    
	        public void freeSignUp(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).free_SignUP_process(WebUIData);
	            
	            
	        }
	    
	    
	    
	    @Test(
			   priority=2,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "TC_Manually generated featured sections_36"
	        )
	    
	        public void webuiManuallygenerated(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).Wait(10).webUI_manually_generated(WebUIData).Wait(10);
	            
	            
	        }
	     
	     @Test(
	    		priority=3,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "TC_Auto generated featured sections_01"
	        )
	    
	        public void webuiAutogenerated(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).Wait(10).webUI_auto_generated(WebUIData).Wait(10);
	            
	            
	        }
	    
	     @Test(
	    		priority=4,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "TC_Custom User Profile_01"
	        )
	    
	        public void webuiUserProfile(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception 
	    {

	            new WebUIPage(true).webUI_user_profile(WebUIData);
	            
	            
	        }
	    
	      @Test(
	    		priority=5,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "TC_Custom User Profile_03"
	        )
	    
	        public void webuiUserProfileOtherFeature(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_user_profileAssert(WebUIData);
	            
	            
	        }
	    
	     @Test(
	    		priority=6,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "TC_Facebook login_01"
	        )
	    
	        public void webuiFacebookLogin(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_Facebook_Login(WebUIData);
	            
	            
	        }
	    @Test(
	    		priority=7,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "TC_Google login_01"
	            
	        )
	    
	        public void webuiGoogleLogin(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_Google_Login(WebUIData);
	            
	            
	        }
	     @Test(
	    		priority=8,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "TC_Facebook login_02"
	            
	        )
	    
	        public void webuiFacebookLoginAlready(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_Facebook_Login_Already(WebUIData);
	            
	            
	        }
	    @Test(
	    		priority=9,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "TC_Google login_02"
	            
	        )
	    
	        public void webuiGoogleLoginAlready(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_Google_Login_Already(WebUIData);
	            
	            
	        }
	    
	    @Test(
	    		priority=10,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "Register and login form page validation"
	            
	        )
	    
	        public void registerLogin(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_Login_validation(WebUIData);
	            
	            
	        }
	    
	    @Test(
	    		priority=11,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "webUI_Watch_History"
	            
	        )
	    
	        public void WaatchHistory(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_Watch_History(WebUIData);
	            
	            
	        }
	    @Test(
	    		priority=12,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "webUI_Watch_History"
	            
	        )
	    
	        public void WaatchHistoryFunction(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_Watch_History_function(WebUIData);
	            
	            
	        }
	    
	    
	    
	    
	           
	    @Test(
	    		priority=13,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "webUI_My_Favorite_login_function"
	            
	        )
	    
	        public void webUIMyFavoriteloginfunction(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_My_Favorite_login_function(WebUIData);
	            
	            
	        }
	    
	     @Test(
	    		priority=14,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "webUI_My_Favorite_verification_CMS"
	            
	        )
	    
	        public void webUIMyFavoriteverificationCMS(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_My_Favorite_verification_CMS(WebUIData);
	            
	            
	        }*/
	   @Test(
	    		priority=15,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "webUI_My_Favorite_Functionality"
	            
	        )
	    
	        public void webUIMyFavoriteFunctionality(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_My_Favorite_Functionality(WebUIData);
	            
	            
	        }
	    
	  /* @Test(
			   priority=16,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "relatedContent_01"
	        )
	    
	        public void webuiRelatedContent(final TestEntity testEntity, final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).relatedContent(WebUIData);
	            
	            
	        } */
	    
	    
	    
	    
	    
/*	    @Test(
	    		priority=8,
	            groups = { "sanity ", "regression" },
	            dataProvider = "WebUIData",
	            description = "TC_Banner Editor"
	            
	        )
	    
	        public void webuiBannerEditor(final TestEntity testEntity,
	            final WebUIData WebUIData) throws Exception {

	            new WebUIPage(true).webUI_Banner_Editor(WebUIData);
	            
	            
	        }*/
	    
	    

	  
	    
	   
	  
}


