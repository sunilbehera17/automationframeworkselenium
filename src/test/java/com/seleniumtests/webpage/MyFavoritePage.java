/*
 * Copyright © 2018 www.muvi.com
 *
 * @author  Sunil Kumar Behera <sunilkumar@muvi.com>
 */

package com.seleniumtests.webpage;

import static com.seleniumtests.core.CustomAssertion.assertEquals;

import static com.seleniumtests.core.Locator.locateByXPath;
import static org.testng.Assert.assertTrue;

import java.util.HashMap;
import java.util.Map;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import com.seleniumtests.core.SeleniumTestsContextManager;
import com.seleniumtests.core.TestLogging;
import com.seleniumtests.dataobject.WebUIData;
import com.seleniumtests.webelements.ButtonElement;
import com.seleniumtests.webelements.CheckBoxElement;
import com.seleniumtests.webelements.HtmlElement;
import com.seleniumtests.webelements.PageObject;
import com.seleniumtests.webelements.SelectList;
import com.seleniumtests.webelements.TextFieldElement;

public class MyFavoritePage extends PageObject {
	public static String url = null;
	public static String URL = null;

	public static Map<Object, Map<Object, Object>> mastermap = new HashMap<Object, Map<Object, Object>>();

	public MyFavoritePage(final boolean openPageURL) throws Exception {

		super(HtmlPage, openPageURL ? url = SeleniumTestsContextManager.getThreadContext().getAppURL() : null);
	}

	private static final ButtonElement HtmlPage = new ButtonElement("Click on Login button ", locateByXPath("//html"));
	private static final ButtonElement checkCheckBoxIsCkickorNot = new ButtonElement("check Check Box Is Click or Not",
			locateByXPath("//input[@id='addfav']"));

	private static final ButtonElement clickOnSaveButton = new ButtonElement("Click On Save button",
			locateByXPath("//input[@id='favbtn']"));
	private static final TextFieldElement enterNumberOfDaysInTextField = new TextFieldElement("Enter number of days in textbox ",
			locateByXPath("//input[@id='duration_num']"));
	private static final HtmlElement assertMatchForSuccess = new HtmlElement("success message matching through assert",
			locateByXPath("//div[@class='alert alert-success alert-dismissable flash-msg m-t-20']"));
	private static final HtmlElement profileList = new HtmlElement("mouse over to profile list",
			locateByXPath("//a[@class='profile dropdown-toggle _user-menu']"));
	private static final ButtonElement profileMyFavoritePage = new ButtonElement("Match profile watch history",
			locateByXPath("//a[@class='favourites']"));
	private static final ButtonElement clickOnyouTubetetailsPage = new ButtonElement("Click On video details page",
			locateByXPath("//span[contains(text(),'Test AutoGenerated flow')]/../..//a[contains(text(),'YouTube Nature')]"));
	private static final ButtonElement clickOnPlayNowButton = new ButtonElement("Click On Palay now button",
			locateByXPath("//a[@class='playbtn btn btn-primary btn-lg'][contains(text(),'Play Now')]"));
	
	
	
	


	public MyFavoritePage SelectByText(final String Text, String xpath) throws Exception {
		waitForSeconds(1);
		SelectList s = new SelectList(Text, By.xpath(xpath));
		s.selectByText(Text);
		return this;

	}

	public MyFavoritePage SimulateClick(ButtonElement element) throws Exception {
		waitForSeconds(2);
		element.simulateClick();
		return this;
	}

	public MyFavoritePage AssertEquals(final String actualText, final String expectedText) throws Exception {
		assertEquals(actualText.toLowerCase(), expectedText.toLowerCase(), "Actual text and Expected Text Not Equal");
		return this;
	}

	public MyFavoritePage Click(ButtonElement element) throws Exception {

		element.waitForPresent(10);
		element.click();
		return this;
	}

	public MyFavoritePage Wait(int value) throws Exception {
		waitForSeconds(value);

		return this;

	}

	public MyFavoritePage WaitForElementPresent(final HtmlElement element) {
		element.waitForPresent(20);

		return this;
	}

	public MyFavoritePage MouseOver(HtmlElement element) throws Exception {

		element.waitForPresent(10);
		element.mouseOver();
		return this;
	}

	public MyFavoritePage SimulateMouseOver(HtmlElement element) throws Exception {

		element.waitForPresent(10);
		element.simulateMouseOver();
		return this;
	}

	public MyFavoritePage Textbox(TextFieldElement element, final String Text) throws Exception {

		element.clearAndType(Text);
		return this;
	}


	public MyFavoritePage AssertTrue(final Boolean actualText2) throws Exception {
		assertTrue(actualText2, "Text should  be visible but now its not visible");
		return this;
	}

	public MyFavoritePage Clickat(ButtonElement element) throws Exception {

		element.waitForPresent(10);
		element.clickAt();
		return this;
	}




	public MyFavoritePage pressEnter() throws Exception {
		Actions act = new Actions(driver);
		act.sendKeys(Keys.ENTER).perform();
		return this;
	}






	public MyFavoritePage pressSpace() throws Exception {
		Actions act = new Actions(driver);
		act.sendKeys(Keys.SPACE).perform();
		return this;
	}

	public MyFavoritePage refreshPage() throws Exception {
		refresh();
		return this;
	}

	public MyFavoritePage closeCurrentWindow() throws Exception {
		driver.close();
		return this;
	}

	public MyFavoritePage WindowSwitch(int val) throws Exception {
		TestLogging.logWebStep("select new window", false);
		driver.switchTo().window((String) driver.getWindowHandles().toArray()[val]);
		waitForSeconds(1);

		return this;
	}

	


	public MyFavoritePage goBackPage() {
		goBack();
		return this;
	}
	public MyFavoritePage Checkbox() throws Exception {
		
		final ButtonElement webelement = new ButtonElement("click on check box",
				locateByXPath("//input[@id='watch']"));

		webelement.clickAt();;
		return this;

	}

	/*public MyFavoritePage scrollToElement() throws Exception {

		WebElement element = driver
				.findElement(By.xpath("//span[contains(text(),'Test AutoGenerated flow')]/../..//a[contains(text(),'YouTube Nature')]"));
		Actions actions = new Actions(driver);
		actions.moveToElement(element);
		actions.click().perform();

		return this;
	}*/	
	private static final ButtonElement EmbdedFrontENDPlayButton = new ButtonElement("Clicking Front end Embded play button",
			locateByXPath("//button[@aria-label='Play']"));
	
	public MyFavoritePage ThirdPartyContent_play() throws Exception 
	 {
		 try {
			selectFrame(0);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 try {
			Click(EmbdedFrontENDPlayButton).Wait(5);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 return this;
	 }
	
	public MyFavoritePage pageScrollDown() throws Exception {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,1000)");

		return this;
	}
	
	
	private static final ButtonElement addtoMyFavoriteButton = new ButtonElement("Get text my favorite verificationadd to my fav",
			locateByXPath("//span[contains(text(),'Add to Favourites')]"));
	private static final ButtonElement addedtoMyFavoriteButton = new ButtonElement("Get text my favorite verification added to my fav",
			locateByXPath("//span[contains(text(),'Added to Favorites')]"));
	private static final ButtonElement verifyMyfavorate = new ButtonElement("Get text my favorite verification",
			locateByXPath("//h2[@class='txt-camel']//..//a[contains(text(),'YouTube Nature')]"));
	private static final ButtonElement clickOnDelete = new ButtonElement("Click on delete button",
			locateByXPath("//h2[@class='txt-camel']//..//a[contains(text(),'YouTube Nature')]//..//..//i[@class='fa fa-trash-o']"));
	private static final ButtonElement clickOnConfirm = new ButtonElement("Click on yes button",
			locateByXPath("//a[contains(@class,'action_btn deleteFavContent')]"));
	private static final ButtonElement VerifyLoginPopUp = new ButtonElement("Verify login popup",
			locateByXPath("//div[@id='loginModal']//h4[@class='modal-title'][contains(text(),'Oops! only Registered users can view this content!')]"));
	
	
	
	
public WebUIPage MyFavoritePageFunctionality(WebUIData WebUIData) throws Exception {
		
	new CmsDashBoard(false)
	.clickOnPreview();
	new WebUILoginPage(false)
	.ClickOnLogInForEndUser(WebUIData);
	
	
	
	     Wait(5)
	     .pageScrollDown()
		.Click(clickOnyouTubetetailsPage)
				
		;
	     
	     
	     if(addtoMyFavoriteButton.getText().equalsIgnoreCase("Add to Favourites"))
	     {
	    	 Click(addtoMyFavoriteButton)
	    	 .AssertEquals(addedtoMyFavoriteButton.getText(), "Added to Favorites")
	    	 .MouseOver(profileList)
	    	 .Click(profileMyFavoritePage)
	    	 .AssertEquals(verifyMyfavorate.getText(), "YouTube Nature")
	    	 .Click(clickOnDelete)
	    	 .Click(clickOnConfirm)
	    	 
	    	 ;
	    	 
	    	 
	    	 
	     }
	     
	     if(addedtoMyFavoriteButton.getText().equalsIgnoreCase("Added to Favorites"))
	     {
	    	 MouseOver(profileList)
	    	 .Click(profileMyFavoritePage)
	    	 .AssertEquals(verifyMyfavorate.getText(), "YouTube Nature")
	    	 .Click(clickOnDelete)
	    	 .Click(clickOnConfirm)
	    	 ;
	     }
		
		
		return new WebUIPage(false);
	}
	
	
	
                        
	
	public WebUIPage checkVerifyMyFavoritePageIsClickOrNot(WebUIData WebUIData) throws Exception {
		
		if(checkCheckBoxIsCkickorNot.isEnabled())
		{
			Click(clickOnSaveButton)
			.AssertEquals(assertMatchForSuccess.getText().replace("×", "").trim(), "status updated successfully.")
			
			
			;
			new CmsDashBoard(false)
			.clickOnPreview();
			new WebUILoginPage(false)
			.ClickOnLogInForEndUser(WebUIData);
			
			MouseOver(profileList)
			.AssertEquals(profileMyFavoritePage.getText(), "My Favorite")
			
			;
			
			
		}
		else
		{
			Checkbox()
			.Textbox(enterNumberOfDaysInTextField, WebUIData.getDuration())
			.Click(clickOnSaveButton)
			.AssertEquals(assertMatchForSuccess.getText(), "Status updated successfully.")
			
			;
		}
		
		
		
		
		
		
		return new WebUIPage(false);
	}
	
	
public WebUIPage checkAndVerifyLoginOrNot(WebUIData WebUIData) throws Exception {
		
	new CmsDashBoard(false)
	.clickOnPreview();
	
	Wait(5)
    .pageScrollDown()
	.Click(clickOnyouTubetetailsPage)
	.Wait(5)
	.Click(addtoMyFavoriteButton)
	.Wait(2)
	.AssertEquals(VerifyLoginPopUp.getText().replace("×", "").trim(), "oops! only registered users can view this content!")
	
	;
		
	
		
		
		
		
		return new WebUIPage(false);
	}
 
	

}
